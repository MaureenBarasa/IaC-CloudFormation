---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS cluster (dedicated VPC: false, dedicated IAM: true) [created and
  managed by eksctl]'

Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com

Parameters:
  EnvironmentName:
    Type: String
    Description: The Environment you are launching services in (Prod/UAT)

  CreatedBy:
    Type: String
    Description: The Identity of the Person Creating the Environment

  ProjectName:
    Type: String
    Description: The Company Project Name

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: "Gaming"
  
  EKSClusterName:
    Description: The name of your EKS Cluster 
    Type: String
    Default: XR3-EKS-Cluster
    
  EKSPublicAccessEndpoint:
    Type: String
    Default: disable
    Description: Configure access to the Kubernetes API server endpoint from outside of your VPC.
    
  EKSPrivateAccessEndpoint:
    Type: String
    Default: Enabled

Resources:
  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/ClusterSharedNodeSecurityGroup"
      VpcId: !ImportValue XR3-VPCID

  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
        - Ref: ControlPlaneSecurityGroup
        SubnetIds:
        - !ImportValue XR3-PrivateSubnet01Id
        - !ImportValue XR3-PrivateSubnet02Id
      RoleArn:
        Fn::GetAtt:
        - ServiceRole
        - Arn
      Version: '1.18'

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/ControlPlaneSecurityGroup"
      VpcId: !ImportValue XR3-VPCID

  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow managed and unmanaged nodes to communicate with each other
        (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - ControlPlane
        - ClusterSecurityGroupId
      ToPort: 65535

  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535

  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - ControlPlane
        - ClusterSecurityGroupId
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535

  PolicyCloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: "${AWS::StackName}-PolicyCloudWatchMetrics"
      Roles:
      - Ref: ServiceRole

  PolicyELBPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: "${AWS::StackName}-PolicyELBPermissions"
      Roles:
      - Ref: ServiceRole

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::FindInMap:
              - ServicePrincipalPartitionMap
              - Ref: AWS::Partition
              - EKS
            - Fn::FindInMap:
              - ServicePrincipalPartitionMap
              - Ref: AWS::Partition
              - EKSFargatePods
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}/ServiceRole"
          
Outputs:
  ARN:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::ARN"
    Value:
      Fn::GetAtt:
      - ControlPlane
      - Arn

  CertificateAuthorityData:
    Value:
      Fn::GetAtt:
      - ControlPlane
      - CertificateAuthorityData

  ClusterSecurityGroupId:
    Export:
      Name:
        EKSClusterSecurityGroupId
    Value:
      Fn::GetAtt:
      - ControlPlane
      - ClusterSecurityGroupId

  ClusterStackName:
    Value:
      Ref: AWS::StackName
  Endpoint:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::Endpoint"
    Value:
      Fn::GetAtt:
      - ControlPlane
      - Endpoint

  FeatureNATMode:
    Value: Single

  SecurityGroup:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::SecurityGroup"
    Value:
      Ref: ControlPlaneSecurityGroup

  ServiceRoleARN:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::ServiceRoleARN"
    Value:
      Fn::GetAtt:
      - ServiceRole
      - Arn

  SharedNodeSecurityGroup:
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}::SharedNodeSecurityGroup"
    Value:
      Ref: ClusterSharedNodeSecurityGroup

